syntax = "proto2";

package xju.pnc;

import "header.proto";
import "pnc_point.proto";
import "error_code.proto";
  
enum LaneOrder {
  UNKOWN_ORDER = 0;
  FIRST_LANE = 1;
  SECOND_LANE = 2;
  THIRD_LANE = 3;
  FORTH_LANE = 4;
}

// 三次曲线 
message CubicCurve {
  // c0 coefficient which is Lane_Position. Positive to the left. 
  optional float c0 = 1;  
  // c1 coefficient which Heading Angle can be calculated from   
  optional float c1 = 2; 
  // c2 coefficient which Lane Curvature can be calculated from. Positive if curved to left.   
  optional float c2 = 3; 
  // c3 coefficient which Lane Curvature Derivative can be calculated from. Sign is According to Curvature.    
  optional float c3 = 4;  
  // 纵向起始点, 靠近host vehicle   
  optional float start = 5;
  // 纵向终止点, 远离host vehicle  
  optional float end = 6;   
}
  
// Lane boundary type 车道线类型已经合并，现在只会给单实线和单虚线 
enum LaneMarkingType {
  // 高精中的虚拟线类型 
  LBR_MARKING_NONE = 0;    
  LBR_MARKING_SINGLE_DASHED_LINE = 1;
  LBR_MARKING_DOUBLE_SOLID_LINE = 2;
  LBR_MARKING_SINGLE_SOLID_LINE = 3;
  LBR_MARKING_RIGHT_SOLID_LINE_LEFT_DASHED_LINE = 4;
  LBR_MARKING_LEFT_SOLID_LINE_RIGHT_DASHED_LINE = 5;
  LBR_MARKING_DOUBLE_WHITE_DOUBLE_YELLOW_SOLID_LINE = 6;
  LBR_MARKING_DOUBLE_WHITE_DOUBLE_YELLOW_DASHED_LINE = 7;
  LBR_MARKING_DOUBLE_DASHED_LINE = 9;
  LBR_MARKING_CURB = 10;
  LBR_MARKING_GUARDRAIL = 11;
  LBR_MARKING_UNKNOWN = -9999;
}

// Lane boundary marking color 
enum LaneMarkingColor {
  COLOR_NONE = 0;
  COLOR_YELLOW = 1;
  COLOR_WHITE = 2;
  COLOR_BLUE = 3;
  COLOR_ORANGE = 4;
}

// Lane boundary marking quality 
enum LaneMarkingQuality {
  // 没有车道线情况下，虚拟出的车道线 
  LOW0 = 0; 
  // 模型漏检或准确率不高的情况下, 依据历史信息及相邻车道线信息推理出车道线 
  LOW1 = 1;
  // 现有评测集上准确率达到90%  
  HIGH0 = 2; 
  // 现有评测集上准确率达到99% 
  HIGH1 = 3; 
}

enum LaneMarkingSourceType {
  PERCEPTION = 0;   // lane line is from PERCEPTION
  HDMAP = 1;        // lane line is from HDMAP
  FUSION = 2;       // part from HDMAP, part from PERCEPTION
  OTHER = 3;        // reserve
}

// Lane type 
enum LaneType {
  LAT_NORMA                   = 0;  // 普通
  LAT_ENTRY                   = 1;  // 入口
  LAT_EXIT                    = 2;  // 出口
  LAT_EMERGENCY               = 3;  // 应急车道
  LAT_ON_RAMP                 = 4;  // 进入匝道
  LAT_OFF_RAMP                = 5;  // 退出匝道
  LAT_CONNECT_RAMP            = 6;  // 连接匝道
  LAT_ACCELERATE              = 7;  // 加速车道
  LAT_DECELERATE              = 8;  // 减速车道
  LAT_DIVERSION               = 9;  // 导流区车道
  LAT_EMERGENCY_PARKING_STRIP = 10;  // 紧急停车带
  LAT_CLIMBING                = 11; // 爬坡车道
  LAT_ESCAPE                  = 12; // 避险车道
  LAT_DEDICATED_CUSTOMS       = 13; // 海关专用车道
  LAT_VIEWING_PLATFROM        = 14; // 观景台车道
  LAT_PARALLEL_LANE           = 15; // 平行车道
  LAT_PARKING                 = 16; // 停车车道
  LAT_LEFT_TURN_AREA          = 17; // 左转等待车道
  LAT_VARIABLE_LANE           = 18; // 可变车道
  LAT_NON_MOTOR_LANE          = 19; // 非机动车道
  LAT_BUS_STOP                = 20; // 公交停靠站
  LAT_NO_ENTRY_LANE           = 21; // 不可行驶车道
  LAT_U_TURN_LANE             = 22; // 掉头车道
  LAT_RIGHT_TURN_LANE         = 23; // 右转专用车道
  LAT_OTHER                   = 24; // 其他车道
  LAT_UNKNOWN = -9999;
}

enum RestrictedLaneType {
  RESTRICTED_LANE_TYPE_NONE   = 0;  // 无
  RESTRICTED_LANE_TYPE_TIDAL  = 1;  // 潮汐车道
  RESTRICTED_LANE_TYPE_BRT    = 2;  // 公交专用道
  RESTRICTED_LANE_TYPE_HOV    = 3;  // HOV车道
  RESTRICTED_LANE_TYPE_TAXI   = 4;  // 出租车专用道
  RESTRICTED_LANE_TYPE_OTHER  = 5;  // 其他车道
}

// Lane quality status 
enum LaneMarkingQualityStatus {
  NORMAL = 0;                       // lane line is good
  ERROR_POSE = 1;                   // lane line is bad because input pose error
  ERROR_LENGTH = 2;                 // lane line is bad because length is short
  ERROR_POINT_NUM = 3;              // lane line is bad because observe points num is little
  ERROR_JUMP = 4;                   // lane line is bad because the jump distance between last status is big
  ERROR_CURVATURE = 5;              // lane line is bad because the radius of curvature is small
  ERROR_POSITION = 6;               // lane line is bad because intersection or spread of two lane
  ERROR_CONFIDENCE = 7;             // lane line is bad because confidence is low
  ERROR_OUTLIER_RATIO = 8;          // lane line is bad because outliter ratio is high
  ERROR_OTHER = 9;                  // reserve
}

message LaneMarkingTypeSection {
  optional LaneMarkingType type = 1;                
  optional float start_point = 2;               
  optional float end_point = 3;                    
}

message HdmapLineMark{
  optional int32 lane_marking_id = 1;
  repeated pnc.Point3D pts_vehicle_coord = 2;  
  optional LaneMarkingType line_type = 3;       
}

message HdmapLaneUnit{
  optional int32 lane_id = 1;  
  optional int32 link_id = 2; 
  optional HdmapLineMark left_linemarking = 3;   
  optional HdmapLineMark right_linemarking = 4;  
  optional float max_speed_limit = 5; 
  optional float min_speed_limit = 6; 
  repeated int32 curvature_set = 7; 
  optional LaneType lane_type = 8;  
  optional RestrictedLaneType restricted_lane_type = 9; 
  repeated float curvature_set_offset = 10;              
}

message LaneMark {
  optional int32 id = 1; 

  optional LaneMarkingType type = 2 [default = LBR_MARKING_UNKNOWN];
  optional LaneMarkingColor color = 3 [default = COLOR_NONE]; 
  optional LaneMarkingQuality quality = 4 [default = HIGH0]; 
  
  optional CubicCurve curve_vehicle_coord = 5; 
  repeated pnc.Point3D pts_vehicle_coord = 6; 

  optional LaneMarkingQualityStatus quality_status = 7;

  optional LaneMarkingSourceType source_type = 8;

  repeated LaneMarkingTypeSection linetype_sections = 9;  
}

message LaneInfo {
  optional int32 lane_id = 1; 
  optional int32 leftline_id = 2;
  optional int32 rightline_id = 3;

  optional CubicCurve curve_center = 16;
  repeated pnc.Point3D pts_center = 17;

  optional LaneType lane_type = 4; 
  optional float max_speed_limit = 5; 
  optional float min_speed_limit = 6; 
  optional float width = 7; 
  repeated HdmapLaneUnit hdmap_lane_data = 8;  
  repeated int32 incoming_lane_ids = 9; 
  optional RestrictedLaneType restricted_lane_type = 10;  
  optional LaneMarkingQuality leftline_quality = 11;
  optional LaneMarkingQuality rightline_quality = 12;
  optional bool is_lane_ending = 13; 
  optional float lane_end_length = 14; 
  optional LaneOrder lane_order = 15;
}

message EmLanes {
  optional Header header = 1; 
  repeated LaneMark lane_mark = 2; 
  repeated LaneInfo lane_info = 3;
  optional ErrorCode error_code = 4 [default = OK];
  optional PathPoint em_pose = 5; 
}